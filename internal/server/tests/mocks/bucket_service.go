// Code generated by MockGen. DO NOT EDIT.
// Source: /opt/gophkeeper/internal/server/interfaces/bucket_service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	interfaces "github.com/besean163/gophkeeper/internal/server/interfaces"
	models "github.com/besean163/gophkeeper/internal/server/models"
	gomock "github.com/golang/mock/gomock"
)

// MockBucketService is a mock of BucketService interface.
type MockBucketService struct {
	ctrl     *gomock.Controller
	recorder *MockBucketServiceMockRecorder
}

// MockBucketServiceMockRecorder is the mock recorder for MockBucketService.
type MockBucketServiceMockRecorder struct {
	mock *MockBucketService
}

// NewMockBucketService creates a new mock instance.
func NewMockBucketService(ctrl *gomock.Controller) *MockBucketService {
	mock := &MockBucketService{ctrl: ctrl}
	mock.recorder = &MockBucketServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucketService) EXPECT() *MockBucketServiceMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockBucketService) CreateAccount(user models.User, account *models.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", user, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockBucketServiceMockRecorder) CreateAccount(user, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockBucketService)(nil).CreateAccount), user, account)
}

// CreateCard mocks base method.
func (m *MockBucketService) CreateCard(user models.User, account *models.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", user, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockBucketServiceMockRecorder) CreateCard(user, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockBucketService)(nil).CreateCard), user, account)
}

// CreateNote mocks base method.
func (m *MockBucketService) CreateNote(user models.User, account *models.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", user, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockBucketServiceMockRecorder) CreateNote(user, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockBucketService)(nil).CreateNote), user, account)
}

// DeleteAccount mocks base method.
func (m *MockBucketService) DeleteAccount(user models.User, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", user, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockBucketServiceMockRecorder) DeleteAccount(user, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockBucketService)(nil).DeleteAccount), user, uuid)
}

// DeleteCard mocks base method.
func (m *MockBucketService) DeleteCard(user models.User, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCard", user, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCard indicates an expected call of DeleteCard.
func (mr *MockBucketServiceMockRecorder) DeleteCard(user, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockBucketService)(nil).DeleteCard), user, uuid)
}

// DeleteNote mocks base method.
func (m *MockBucketService) DeleteNote(user models.User, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", user, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockBucketServiceMockRecorder) DeleteNote(user, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockBucketService)(nil).DeleteNote), user, uuid)
}

// GetAccounts mocks base method.
func (m *MockBucketService) GetAccounts(user models.User) ([]*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", user)
	ret0, _ := ret[0].([]*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockBucketServiceMockRecorder) GetAccounts(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockBucketService)(nil).GetAccounts), user)
}

// GetCards mocks base method.
func (m *MockBucketService) GetCards(user models.User) ([]*models.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCards", user)
	ret0, _ := ret[0].([]*models.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCards indicates an expected call of GetCards.
func (mr *MockBucketServiceMockRecorder) GetCards(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCards", reflect.TypeOf((*MockBucketService)(nil).GetCards), user)
}

// GetNotes mocks base method.
func (m *MockBucketService) GetNotes(user models.User) ([]*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotes", user)
	ret0, _ := ret[0].([]*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotes indicates an expected call of GetNotes.
func (mr *MockBucketServiceMockRecorder) GetNotes(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotes", reflect.TypeOf((*MockBucketService)(nil).GetNotes), user)
}

// SyncAccounts mocks base method.
func (m *MockBucketService) SyncAccounts(service interfaces.BucketService, user models.User, accounts []models.ExternalAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncAccounts", service, user, accounts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncAccounts indicates an expected call of SyncAccounts.
func (mr *MockBucketServiceMockRecorder) SyncAccounts(service, user, accounts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncAccounts", reflect.TypeOf((*MockBucketService)(nil).SyncAccounts), service, user, accounts)
}

// SyncCards mocks base method.
func (m *MockBucketService) SyncCards(service interfaces.BucketService, user models.User, accounts []models.ExternalCard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncCards", service, user, accounts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncCards indicates an expected call of SyncCards.
func (mr *MockBucketServiceMockRecorder) SyncCards(service, user, accounts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncCards", reflect.TypeOf((*MockBucketService)(nil).SyncCards), service, user, accounts)
}

// SyncNotes mocks base method.
func (m *MockBucketService) SyncNotes(service interfaces.BucketService, user models.User, accounts []models.ExternalNote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncNotes", service, user, accounts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncNotes indicates an expected call of SyncNotes.
func (mr *MockBucketServiceMockRecorder) SyncNotes(service, user, accounts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncNotes", reflect.TypeOf((*MockBucketService)(nil).SyncNotes), service, user, accounts)
}

// UpdateAccount mocks base method.
func (m *MockBucketService) UpdateAccount(user models.User, account *models.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", user, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockBucketServiceMockRecorder) UpdateAccount(user, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockBucketService)(nil).UpdateAccount), user, account)
}

// UpdateCard mocks base method.
func (m *MockBucketService) UpdateCard(user models.User, account *models.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCard", user, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockBucketServiceMockRecorder) UpdateCard(user, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockBucketService)(nil).UpdateCard), user, account)
}

// UpdateNote mocks base method.
func (m *MockBucketService) UpdateNote(user models.User, account *models.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", user, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockBucketServiceMockRecorder) UpdateNote(user, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockBucketService)(nil).UpdateNote), user, account)
}
