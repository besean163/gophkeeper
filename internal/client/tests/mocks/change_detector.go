// Code generated by MockGen. DO NOT EDIT.
// Source: /opt/gophkeeper/internal/client/core/services/data_service/api/service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	client "github.com/besean163/gophkeeper/internal/models/client"
	server "github.com/besean163/gophkeeper/internal/models/server"
	gomock "github.com/golang/mock/gomock"
)

// MockChangeDetector is a mock of ChangeDetector interface.
type MockChangeDetector struct {
	ctrl     *gomock.Controller
	recorder *MockChangeDetectorMockRecorder
}

// MockChangeDetectorMockRecorder is the mock recorder for MockChangeDetector.
type MockChangeDetectorMockRecorder struct {
	mock *MockChangeDetector
}

// NewMockChangeDetector creates a new mock instance.
func NewMockChangeDetector(ctrl *gomock.Controller) *MockChangeDetector {
	mock := &MockChangeDetector{ctrl: ctrl}
	mock.recorder = &MockChangeDetectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChangeDetector) EXPECT() *MockChangeDetectorMockRecorder {
	return m.recorder
}

// GetAccountChanges mocks base method.
func (m *MockChangeDetector) GetAccountChanges(user client.User, items []client.Account, externalItems []server.Account) ([]client.Account, []client.Account, []client.Account) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountChanges", user, items, externalItems)
	ret0, _ := ret[0].([]client.Account)
	ret1, _ := ret[1].([]client.Account)
	ret2, _ := ret[2].([]client.Account)
	return ret0, ret1, ret2
}

// GetAccountChanges indicates an expected call of GetAccountChanges.
func (mr *MockChangeDetectorMockRecorder) GetAccountChanges(user, items, externalItems interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountChanges", reflect.TypeOf((*MockChangeDetector)(nil).GetAccountChanges), user, items, externalItems)
}

// GetCardChanges mocks base method.
func (m *MockChangeDetector) GetCardChanges(user client.User, items []client.Card, externalItems []server.Card) ([]client.Card, []client.Card, []client.Card) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardChanges", user, items, externalItems)
	ret0, _ := ret[0].([]client.Card)
	ret1, _ := ret[1].([]client.Card)
	ret2, _ := ret[2].([]client.Card)
	return ret0, ret1, ret2
}

// GetCardChanges indicates an expected call of GetCardChanges.
func (mr *MockChangeDetectorMockRecorder) GetCardChanges(user, items, externalItems interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardChanges", reflect.TypeOf((*MockChangeDetector)(nil).GetCardChanges), user, items, externalItems)
}

// GetNoteChanges mocks base method.
func (m *MockChangeDetector) GetNoteChanges(user client.User, items []client.Note, externalItems []server.Note) ([]client.Note, []client.Note, []client.Note) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteChanges", user, items, externalItems)
	ret0, _ := ret[0].([]client.Note)
	ret1, _ := ret[1].([]client.Note)
	ret2, _ := ret[2].([]client.Note)
	return ret0, ret1, ret2
}

// GetNoteChanges indicates an expected call of GetNoteChanges.
func (mr *MockChangeDetectorMockRecorder) GetNoteChanges(user, items, externalItems interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteChanges", reflect.TypeOf((*MockChangeDetector)(nil).GetNoteChanges), user, items, externalItems)
}
