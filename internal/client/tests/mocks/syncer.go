// Code generated by MockGen. DO NOT EDIT.
// Source: /opt/gophkeeper/internal/client/core/services/data_service/api/syncer/syncer.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/besean163/gophkeeper/internal/client/core/models"
	gomock "github.com/golang/mock/gomock"
)

// MockSyncer is a mock of Syncer interface.
type MockSyncer struct {
	ctrl     *gomock.Controller
	recorder *MockSyncerMockRecorder
}

// MockSyncerMockRecorder is the mock recorder for MockSyncer.
type MockSyncerMockRecorder struct {
	mock *MockSyncer
}

// NewMockSyncer creates a new mock instance.
func NewMockSyncer(ctrl *gomock.Controller) *MockSyncer {
	mock := &MockSyncer{ctrl: ctrl}
	mock.recorder = &MockSyncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncer) EXPECT() *MockSyncerMockRecorder {
	return m.recorder
}

// SyncAccounts mocks base method.
func (m *MockSyncer) SyncAccounts(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncAccounts", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncAccounts indicates an expected call of SyncAccounts.
func (mr *MockSyncerMockRecorder) SyncAccounts(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncAccounts", reflect.TypeOf((*MockSyncer)(nil).SyncAccounts), user)
}

// SyncAll mocks base method.
func (m *MockSyncer) SyncAll(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncAll", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncAll indicates an expected call of SyncAll.
func (mr *MockSyncerMockRecorder) SyncAll(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncAll", reflect.TypeOf((*MockSyncer)(nil).SyncAll), user)
}

// SyncCards mocks base method.
func (m *MockSyncer) SyncCards(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncCards", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncCards indicates an expected call of SyncCards.
func (mr *MockSyncerMockRecorder) SyncCards(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncCards", reflect.TypeOf((*MockSyncer)(nil).SyncCards), user)
}

// SyncNotes mocks base method.
func (m *MockSyncer) SyncNotes(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncNotes", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncNotes indicates an expected call of SyncNotes.
func (mr *MockSyncerMockRecorder) SyncNotes(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncNotes", reflect.TypeOf((*MockSyncer)(nil).SyncNotes), user)
}
