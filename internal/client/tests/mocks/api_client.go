// Code generated by MockGen. DO NOT EDIT.
// Source: /opt/gophkeeper/internal/client/core/interfaces/api_client.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	entities "github.com/besean163/gophkeeper/internal/server/api/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockApiClient is a mock of ApiClient interface.
type MockApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockApiClientMockRecorder
}

// MockApiClientMockRecorder is the mock recorder for MockApiClient.
type MockApiClientMockRecorder struct {
	mock *MockApiClient
}

// NewMockApiClient creates a new mock instance.
func NewMockApiClient(ctrl *gomock.Controller) *MockApiClient {
	mock := &MockApiClient{ctrl: ctrl}
	mock.recorder = &MockApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiClient) EXPECT() *MockApiClientMockRecorder {
	return m.recorder
}

// GetAccounts mocks base method.
func (m *MockApiClient) GetAccounts() (*entities.GetAccountsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts")
	ret0, _ := ret[0].(*entities.GetAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockApiClientMockRecorder) GetAccounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockApiClient)(nil).GetAccounts))
}

// GetCards mocks base method.
func (m *MockApiClient) GetCards() (*entities.GetCardsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCards")
	ret0, _ := ret[0].(*entities.GetCardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCards indicates an expected call of GetCards.
func (mr *MockApiClientMockRecorder) GetCards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCards", reflect.TypeOf((*MockApiClient)(nil).GetCards))
}

// GetNotes mocks base method.
func (m *MockApiClient) GetNotes() (*entities.GetNotesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotes")
	ret0, _ := ret[0].(*entities.GetNotesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotes indicates an expected call of GetNotes.
func (mr *MockApiClientMockRecorder) GetNotes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotes", reflect.TypeOf((*MockApiClient)(nil).GetNotes))
}

// HasConnection mocks base method.
func (m *MockApiClient) HasConnection() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasConnection")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasConnection indicates an expected call of HasConnection.
func (mr *MockApiClientMockRecorder) HasConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasConnection", reflect.TypeOf((*MockApiClient)(nil).HasConnection))
}

// Login mocks base method.
func (m *MockApiClient) Login(input entities.LoginInput) (entities.TokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", input)
	ret0, _ := ret[0].(entities.TokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockApiClientMockRecorder) Login(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockApiClient)(nil).Login), input)
}

// Register mocks base method.
func (m *MockApiClient) Register(input entities.RegisterInput) (entities.TokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", input)
	ret0, _ := ret[0].(entities.TokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockApiClientMockRecorder) Register(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockApiClient)(nil).Register), input)
}

// SetToken mocks base method.
func (m *MockApiClient) SetToken(token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetToken", token)
}

// SetToken indicates an expected call of SetToken.
func (mr *MockApiClientMockRecorder) SetToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToken", reflect.TypeOf((*MockApiClient)(nil).SetToken), token)
}

// SyncAccounts mocks base method.
func (m *MockApiClient) SyncAccounts(input entities.AccountsSyncInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncAccounts", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncAccounts indicates an expected call of SyncAccounts.
func (mr *MockApiClientMockRecorder) SyncAccounts(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncAccounts", reflect.TypeOf((*MockApiClient)(nil).SyncAccounts), input)
}

// SyncCards mocks base method.
func (m *MockApiClient) SyncCards(input entities.CardsSyncInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncCards", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncCards indicates an expected call of SyncCards.
func (mr *MockApiClientMockRecorder) SyncCards(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncCards", reflect.TypeOf((*MockApiClient)(nil).SyncCards), input)
}

// SyncNotes mocks base method.
func (m *MockApiClient) SyncNotes(input entities.NotesSyncInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncNotes", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncNotes indicates an expected call of SyncNotes.
func (mr *MockApiClientMockRecorder) SyncNotes(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncNotes", reflect.TypeOf((*MockApiClient)(nil).SyncNotes), input)
}
